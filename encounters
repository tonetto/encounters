#!/bin/bash

## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## version 2 as published by the Free Software Foundation.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
##
## author: Leonardo Tonetto


die() { echo "$@" 1>&2 ; exit 1; }

trap 'trap_exit $INTERFACE $NEW_INTERFACE $WAITPID' EXIT
function trap_exit
{
    kill_child_procs $3
    [ `uname` = "Linux" -a ! -z "$2" ] && restore_linux_interface $1 $2
}

function kill_child_procs
{
    echo "Exiting..."
    while [ "$1" != "" ];
    do
        kill -15 $1 2>/dev/null
        wait $1
        shift
    done
    sync
}

function restore_linux_interface
{
    sudo ifconfig $2 down
    sleep 1
    sudo iw $2 interface add $1 type managed
    sleep 1
    sudo iw $2 del
    sudo ifconfig $1 up
}

function setup_linux_interface
{
    ## Need these sleep to setup some wifi cards
    NEW_INTERFACE=mon0
    sudo iw $NEW_INTERFACE info >/dev/null && NEW_INTERFACE=mon1
    >&2 echo "Setting up $1 in monitor mode to: $NEW_INTERFACE"
    sudo ifconfig $1 down
    sleep 1
    sudo iw $1 interface add $NEW_INTERFACE type monitor
    sleep 1
    sudo iw $1 del
    sleep 1
    sudo ifconfig $NEW_INTERFACE up
    sleep 1
    sudo iw $NEW_INTERFACE set channel 1
    echo $NEW_INTERFACE
}

function usage
{
    echo "usage: encounter -o </output/path> -i <wlan0> [-c] | [-h]"
    echo ""
    echo "                 -o | --output:    /output/path for tcpdump"
    echo "                 -i | --interface: <wlan0> interface"
#    echo "                 -m | --mapping:   mapping mode (check README)"
    echo "                 -h | --help:      shows this message"
    echo "                 -c | --chanhop:   Channel Hopper (check README)"
}


function channel_hopper
{
    C_SEQ="1 4 7 10 13 2 5 8 11 14 3 6 9 12"
    # Need to turn it off on Mac OS
    [ `uname` = "Darwin" ] && sudo airport -z
    [ `uname` = "Linux" ] && sleep 5
    while true;
    do
        for CHANNEL in $C_SEQ;
        do
            [ `uname` = "Linux" ] && sudo iw $1 set channel $CHANNEL && sleep 5 && continue
            [ `uname` = "Darwin" ] && sudo airport --channel=$CHANNEL && sleep 5 && continue
        done
    done
}

if [ ! -x /usr/sbin/tcpdump -a ! -x /usr/bin/tcpdump ];
then
    >&2 echo "Please run ./setup and try again. Check README file for instructions."
    exit 1
fi

INTERFACE=
OUTPUT_PATH=./
MAPPING=
CHANNEL_HOPPING=0
while [ "$1" != "" ];
do
    case $1 in
        -i | --interface)
            shift
            INTERFACE=$1
            ;;
        -o | --output )
            shift
            OUTPUT_PATH=$1
            ;;
        -h | --help )
            usage
            exit
            ;;
        -m | --mapping )
            MAPPING=1
            ;;
        -c | --chanhop )
            CHANNEL_HOPPING=1
            ;;
        * )
            usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z $INTERFACE ]];
then
    >&2 echo "Please indicate the desired network interface"
    usage
    exit 1
fi

if [[ ! -d "$OUTPUT_PATH" ]];
then
    >&2 echo "Please indicate a valid output path"
    usage
    exit 1
fi

## Input is correct, let's start
>&2 echo "Calling tcpdump on interface $INTERFACE."

## Need sudo on Linux
TCPDUMP=
NEW_INTERFACE=
case `uname` in
    "Linux" )
	! sudo iw $INTERFACE info >/dev/null && die "Wrong interface provided: $INTERFACE"
	NEW_INTERFACE=`setup_linux_interface $INTERFACE`
	TCPDUMP="sudo tcpdump -i $NEW_INTERFACE"
        ;;
    "Darwin" )
	TCPDUMP="tcpdump -i $INTERFACE"
        ;;
    * )
        die "Your OS is not supported."
        ;;
esac

## Timestamp function
TIMESTAMP=$(date +'%s')
## Some output for debug

$TCPDUMP -I -w $OUTPUT_PATH/$TIMESTAMP.capture type mgt &
WAITPID=$!
if [ $CHANNEL_HOPPING -eq 1 ];
then
    echo "Channel Hopping"
    channel_hopper $INTERFACE &
    WAITPID="$WAITPID $!"
fi

## This was quite complicated... Let's leave it out of radar for now
if [[ $MAPPING -eq 1 ]];
then
    echo "Mode: Mapping"
else
    while true; do
        read -n 1 -s KEY
        if [[ $KEY = q ]];
        then
            #kill_child_procs $WAITPID
            >&2 echo "Exit with Ctrl-C"
        fi
    done
    wait
fi


STATE='STOPPED'
>&2 echo "Initial state: $state"
while true; do
    read -n 1 -s KEY
    if [[ $KEY = q ]];
    then
        #kill_child_procs $WAITPID
        >&2 echo "Exit with Ctrl-C"
    else
        if [[ "$STATE" = 'STOPPED' ]]; then
            STATE='MOVING'
        else
            STATE='STOPPED'
        fi
        echo "New state: $STATE !"
        CURRENT_TS=$(date +'%s')
        echo $CURRENT_TS $STATE >>$OUTPUT_PATH/$TIMESTAMP.mapping
    fi
done
